// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: tarareba.proto

package tarareba

import (
	context "context"
	reflect "reflect"
	sync "sync"

	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCompetitionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. AtCoder のユーザー ID。（例：monkukui）
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetCompetitionHistoryRequest) Reset() {
	*x = GetCompetitionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tarareba_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompetitionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompetitionHistoryRequest) ProtoMessage() {}

func (x *GetCompetitionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tarareba_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompetitionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetCompetitionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_tarareba_proto_rawDescGZIP(), []int{0}
}

func (x *GetCompetitionHistoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetCompetitionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. rated かどうか
	IsRated bool `protobuf:"varint,1,opt,name=is_rated,json=isRated,proto3" json:"is_rated,omitempty"`
	// Required. 順位
	Place uint32 `protobuf:"varint,2,opt,name=place,proto3" json:"place,omitempty"`
	// Required. 参加前のレート
	OldRating uint32 `protobuf:"varint,3,opt,name=old_rating,json=oldRating,proto3" json:"old_rating,omitempty"`
	// Required. 参加後のレート
	NewRating uint32 `protobuf:"varint,4,opt,name=new_rating,json=newRating,proto3" json:"new_rating,omitempty"`
	// Required. パフォーマンス
	Performance uint32 `protobuf:"varint,5,opt,name=performance,proto3" json:"performance,omitempty"`
	// Optional. 内部パフォーマンス
	InnerPerformance *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=inner_performance,json=innerPerformance,proto3" json:"inner_performance,omitempty"`
	// Optional. コンテストのスクリーンネーム（おそらく、フロント側でリンクをはるのに使う）
	ContestScreenName *wrappers.StringValue `protobuf:"bytes,7,opt,name=contest_screen_name,json=contestScreenName,proto3" json:"contest_screen_name,omitempty"`
	// Required. コンテスト名
	ContestName string `protobuf:"bytes,8,opt,name=contest_name,json=contestName,proto3" json:"contest_name,omitempty"`
	// Optional. コンテスト名（英語）
	ContestNameEn *wrappers.StringValue `protobuf:"bytes,9,opt,name=contest_name_en,json=contestNameEn,proto3" json:"contest_name_en,omitempty"`
	// Optional. コンテストの終了時刻
	EndTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Required. tarareba サービス内で、コンテストに参加したかどうか
	IsParticipated bool `protobuf:"varint,20,opt,name=is_participated,json=isParticipated,proto3" json:"is_participated,omitempty"`
}

func (x *GetCompetitionHistoryResponse) Reset() {
	*x = GetCompetitionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tarareba_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompetitionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompetitionHistoryResponse) ProtoMessage() {}

func (x *GetCompetitionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tarareba_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompetitionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetCompetitionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_tarareba_proto_rawDescGZIP(), []int{1}
}

func (x *GetCompetitionHistoryResponse) GetIsRated() bool {
	if x != nil {
		return x.IsRated
	}
	return false
}

func (x *GetCompetitionHistoryResponse) GetPlace() uint32 {
	if x != nil {
		return x.Place
	}
	return 0
}

func (x *GetCompetitionHistoryResponse) GetOldRating() uint32 {
	if x != nil {
		return x.OldRating
	}
	return 0
}

func (x *GetCompetitionHistoryResponse) GetNewRating() uint32 {
	if x != nil {
		return x.NewRating
	}
	return 0
}

func (x *GetCompetitionHistoryResponse) GetPerformance() uint32 {
	if x != nil {
		return x.Performance
	}
	return 0
}

func (x *GetCompetitionHistoryResponse) GetInnerPerformance() *wrappers.UInt32Value {
	if x != nil {
		return x.InnerPerformance
	}
	return nil
}

func (x *GetCompetitionHistoryResponse) GetContestScreenName() *wrappers.StringValue {
	if x != nil {
		return x.ContestScreenName
	}
	return nil
}

func (x *GetCompetitionHistoryResponse) GetContestName() string {
	if x != nil {
		return x.ContestName
	}
	return ""
}

func (x *GetCompetitionHistoryResponse) GetContestNameEn() *wrappers.StringValue {
	if x != nil {
		return x.ContestNameEn
	}
	return nil
}

func (x *GetCompetitionHistoryResponse) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetCompetitionHistoryResponse) GetIsParticipated() bool {
	if x != nil {
		return x.IsParticipated
	}
	return false
}

var File_tarareba_proto protoreflect.FileDescriptor

var file_tarareba_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x61, 0x72, 0x65, 0x62, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x74, 0x61, 0x72, 0x61, 0x72, 0x65, 0x62, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x92, 0x04, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x6c, 0x64,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x64, 0x32, 0x7d, 0x0a, 0x0f, 0x54, 0x61, 0x72,
	0x61, 0x72, 0x65, 0x62, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x72, 0x61, 0x72, 0x65, 0x62, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x61, 0x72, 0x61, 0x72, 0x65, 0x62, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tarareba_proto_rawDescOnce sync.Once
	file_tarareba_proto_rawDescData = file_tarareba_proto_rawDesc
)

func file_tarareba_proto_rawDescGZIP() []byte {
	file_tarareba_proto_rawDescOnce.Do(func() {
		file_tarareba_proto_rawDescData = protoimpl.X.CompressGZIP(file_tarareba_proto_rawDescData)
	})
	return file_tarareba_proto_rawDescData
}

var file_tarareba_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tarareba_proto_goTypes = []interface{}{
	(*GetCompetitionHistoryRequest)(nil),  // 0: tarareba.GetCompetitionHistoryRequest
	(*GetCompetitionHistoryResponse)(nil), // 1: tarareba.GetCompetitionHistoryResponse
	(*wrappers.UInt32Value)(nil),          // 2: google.protobuf.UInt32Value
	(*wrappers.StringValue)(nil),          // 3: google.protobuf.StringValue
	(*timestamp.Timestamp)(nil),           // 4: google.protobuf.Timestamp
}
var file_tarareba_proto_depIdxs = []int32{
	2, // 0: tarareba.GetCompetitionHistoryResponse.inner_performance:type_name -> google.protobuf.UInt32Value
	3, // 1: tarareba.GetCompetitionHistoryResponse.contest_screen_name:type_name -> google.protobuf.StringValue
	3, // 2: tarareba.GetCompetitionHistoryResponse.contest_name_en:type_name -> google.protobuf.StringValue
	4, // 3: tarareba.GetCompetitionHistoryResponse.end_time:type_name -> google.protobuf.Timestamp
	0, // 4: tarareba.TararebaService.GetCompetitionHistory:input_type -> tarareba.GetCompetitionHistoryRequest
	1, // 5: tarareba.TararebaService.GetCompetitionHistory:output_type -> tarareba.GetCompetitionHistoryResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tarareba_proto_init() }
func file_tarareba_proto_init() {
	if File_tarareba_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tarareba_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompetitionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tarareba_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompetitionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tarareba_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tarareba_proto_goTypes,
		DependencyIndexes: file_tarareba_proto_depIdxs,
		MessageInfos:      file_tarareba_proto_msgTypes,
	}.Build()
	File_tarareba_proto = out.File
	file_tarareba_proto_rawDesc = nil
	file_tarareba_proto_goTypes = nil
	file_tarareba_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TararebaServiceClient is the client API for TararebaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TararebaServiceClient interface {
	// コンテスト参加履歴を返す
	GetCompetitionHistory(ctx context.Context, in *GetCompetitionHistoryRequest, opts ...grpc.CallOption) (*GetCompetitionHistoryResponse, error)
}

type tararebaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTararebaServiceClient(cc grpc.ClientConnInterface) TararebaServiceClient {
	return &tararebaServiceClient{cc}
}

func (c *tararebaServiceClient) GetCompetitionHistory(ctx context.Context, in *GetCompetitionHistoryRequest, opts ...grpc.CallOption) (*GetCompetitionHistoryResponse, error) {
	out := new(GetCompetitionHistoryResponse)
	err := c.cc.Invoke(ctx, "/tarareba.TararebaService/GetCompetitionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TararebaServiceServer is the server API for TararebaService service.
type TararebaServiceServer interface {
	// コンテスト参加履歴を返す
	GetCompetitionHistory(context.Context, *GetCompetitionHistoryRequest) (*GetCompetitionHistoryResponse, error)
}

// UnimplementedTararebaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTararebaServiceServer struct {
}

func (*UnimplementedTararebaServiceServer) GetCompetitionHistory(context.Context, *GetCompetitionHistoryRequest) (*GetCompetitionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetitionHistory not implemented")
}

func RegisterTararebaServiceServer(s *grpc.Server, srv TararebaServiceServer) {
	s.RegisterService(&_TararebaService_serviceDesc, srv)
}

func _TararebaService_GetCompetitionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetitionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TararebaServiceServer).GetCompetitionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarareba.TararebaService/GetCompetitionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TararebaServiceServer).GetCompetitionHistory(ctx, req.(*GetCompetitionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TararebaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tarareba.TararebaService",
	HandlerType: (*TararebaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompetitionHistory",
			Handler:    _TararebaService_GetCompetitionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tarareba.proto",
}
